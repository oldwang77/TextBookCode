C语言程序设计 --人民邮电出版社

72.链表中数据删除，插入
#include <stdio.h>
#include <malloc.h>
struct Node
{
int data;
struct Node *next;
};
typedef struct Node Node;

Node * Create();//返回值是指向结点的指针
void Print(Node *head);//打印改链表
Node * Delete(Node *head,int num);//删除元素num
Node *Insert(Node *head,int num1); //插入元素n
void Realse(Node *head);

int main()
{
      int num;//输入待删除的数据
	  int num1; //输入要删除的数据
Node *head;//定义头指针head
head=Create();//创建一个链表，返回的投指针返还给head
Print(head);//链表的遍历，输出每个元素的值

printf("输入要删除的数据num\n");
scanf("%d",&num);
Delete(head,num);//删除链表中的一个元素，删除num
Print(head);

printf("输入要插入的数据num1\n");
scanf("%d",&num1);
Insert(head,num1);
Print(head);

Realse(head);
printf("\n");

return 0;
}

Node * Create()//创建一个单链表
{
    Node *head,*tail,*p;
    int num;
    head=tail=NULL;
	printf("请输入一批数据，以-9999结尾.\n");
	scanf("%d",&num);
	while (num!=-9999)
	{
	p=(Node *)malloc(sizeof(Node));
	p->data =num;
	p->next =NULL;
    	if(head==NULL)//判断输入的是不是第一个结点
		{
		head=p;
		}
 	    else 
		{
		tail->next =p;
		}

	tail=p;
	scanf("%d",&num);
	}
    return head;
}

void Print(Node *head)
{
Node *p;
p=head;
   if(head==NULL)
   {
     printf("链表为空\n");
   }
  else 
     printf("链表如下\n");
  while(p!=NULL)
  {
  printf("%d ",p->data);
  p=p->next ;
  }
printf("\n");
}

void Realse(Node *head)
{
Node *p1,*p2;
p1=head;
while(p1!=NULL)
{
p2=p1;
p1=p1->next ;
free(p2);
}
printf("缓存释放成功\n");
}


Node * Delete(Node *head,int num)
{
Node *p1,*p2;
if(head==NULL)
{
	printf("链表为空\n");
	return head;
}
p1=head;
while(p1->next&&p1->data!=num)
{
p2=p1;
p1=p1->next;
}
   if(p1->data==num)
   {
    if(head==p1)
	{
    head=p1->next;
	}
   else
   {
   p2->next=p1->next;
   }
   free(p1);
   printf("删除成功\n");
}
else
{
printf("链表中无此数据\n");
}
return head;
}

Node *Insert(Node *head,int num1)
{
Node *p,*p1,*p2;
p=(Node *)malloc(sizeof(Node));
p->data =num1;
p->next =NULL;
p1=head;
while(p1&&p->data >p1->data )
{
p2=p1;
p1=p1->next ;
}
if(p1==head)
{
head=p;
}
else 
{
p2->next =p;
}
p->next =p1;
printf("数据插入成功\n");
return head;

}
71.链表的建立打印和释放  书本P232
#include <stdio.h>
#include <malloc.h>
struct Node
{
int data;
struct Node *next;
};
typedef struct Node Node;

Node * Create();//返回值是指向结点的指针
void Print(Node *head);
void Realse(Node *head);

int main()
{
Node *head;//定义头指针head
head=Create();//创建一个链表，返回的投指针返还给head
Print(head);//链表的遍历，输出每个元素的值
Realse(head);

return 0;
}

Node * Create()//创建一个单链表
{
    Node *head,*tail,*p;
    int num;
    head=tail=NULL;
	printf("请输入一批数据，以-9999结尾.\n");
	scanf("%d",&num);
	while (num!=-9999)
	{
	p=(Node *)malloc(sizeof(Node));
	p->data =num;
	p->next =NULL;
    	if(head==NULL)//判断输入的是不是第一个结点
		{
		head=p;
		}
 	    else 
		{
		tail->next =p;
		}

	tail=p;
	scanf("%d",&num);
	}
    return head;
}

void Print(Node *head)
{
Node *p;
p=head;
   if(head==NULL)
   {
     printf("链表为空\n");
   }
  else 
     printf("链表如下\n");
  while(p!=NULL)
  {
  printf("%d ",p->data);
  p=p->next ;
  }
printf("\n");
}

void Realse(Node *head)
{
Node *p1,*p2;
p1=head;
while(p1!=NULL)
{
p2=p1;
p1=p1->next ;
free(p2);
}
printf("缓存释放成功\n");
}
68
70.
//将D:\\info.dat中文件的信息读入到内存，并显示（输入到内存，就是你定义个变量，把数据放到变量里）
fp=fopen("D:\\info.dat");
    if(!fp)
	{
        printf("ERROR\n");
        exit(1);
	}
n=Readout(fp,st,n);
fclose(fp);

void Writestu(FILE *fp,Student *p,int n)
{
	fwrite(p,sizeof(Student),n,fp);  //块数据的读写，p是输数据的首地址，
	              //size是数据块的字节数，n是数据块的字数，fp是文件指针，
	              //从fp中拿取数据给p
}

69/*定义一个学生数据存储类型，输入学生的三门成绩，并按平均分的高低输出学生的信息，
若有一门成绩低于60，直接输出该学生的成绩 */
#include <stdio.h>
struct Score
{
int subject1;
int subject2;
int subject3;
};
typedef struct Score Score;

struct Student 
{
int ID;
char name[20];
Score score;
double average;
};
typedef struct Student Student;


void input(Student st[],int n);  //Student st[]本质上是结构体指针，可以写成Student st[]
void sort(Student st[],int n);
void output(Student st[],int n);
void judge(Student st[],int n);
int main()
{
   Student st[200]; //定义一个结构体数组
   int n;
   scanf("%d",&n);//输入学生的数量
   input(st,n);
   
   judge(st,n);

   sort(st,n);
   output(st,n);
   return 0;

}

void input(Student st[],int n)
{
	int i;
    for(i=0;i<n;i++)
	{
	scanf("%d%s%d%d%d",&st[i].ID,st[i].name,&st[i].score.subject1,&st[i].score.subject2,&st[i].score.subject3 );
	}
}

void output(Student st[],int n)
{
  int i;
  for(i=0;i<n;i++)
	{
	printf("%d%s%d%d%d\n",st[i].ID,st[i].name,st[i].score.subject1,st[i].score.subject2,st[i].score.subject3);

	}
}

void judge(Student st[],int n)
{
   int i;
   for(i=0;i<n;i++)
   {
	   if((st[i].score.subject1<60)||(st[i].score.subject2<60)||(st[i].score.subject3<60))
		 printf("%d%s%d%d%d\n",st[i].ID,st[i].name,st[i].score.subject1,st[i].score.subject2,st[i].score.subject3);
	 
   }
}

void sort(Student st[],int n)
{
    int i,j,index;
	Student temp;  //交换成员
	for(i=0;i<n-1;i++)
	{
	for(j=i+1;j<n;j++)
		
		if(st[i].score.subject1+st[i].score.subject2+st[i].score.subject3>st[j].score.subject1+st[j].score.subject2+st[j].score.subject3)
		{
			temp=st[index];
			st[index]=st[j];
			st[j]=temp;
		}

	}

}
68./*编写程序，输入一个长整型数，将其转换为十六进制，以字符串形式输出。（提示：可以定义char s[]="0123456789ABCDEF"以帮助输出十六进制字符）。*/
#include <stdio.h>
int main()
{
   long int x;
   int t=0,i=0;
   char a[200];
   char *pa=a;
   char p[200]={'A','B','C','D','E','F'};
   char b[200]={'0'};
     scanf("%d",&x);
	do
	{
	   t=x%16;
	   if(t<=9&&t>=0)
	   {
          *pa=t+48;
	   }
	   else
	   {
		   *pa=p[t-10];
	   }
	   x=x/16;
	   pa++;
	}while(x);

pa--;
for( ;pa>=a;pa--)
//printf("%c",*pa);  //这是以字符的形式输出，题目要求以字符串
b[i++]=*pa;

puts(b);  //puts打印字符串
return 0;
}
67从键盘输入一个班级的学生信息，包括学号、姓名和成绩，人数不超过10人，要求输出成绩最高者的全部信息。
#include <stdio.h>
struct Student
{
char ID;
char name[20];
int score;
};
typedef struct Student Student;
int main()
{
	 Student st[10];
	 int n,i;
	 double m=0.0;
	 int max=0;
 	  
	 scanf("%d",&n);
	 getchar();
     for(i=0;i<n;i++)
	 {
        scanf("%c",&st[i].ID);
        scanf("%s",st[i].name);
        scanf("%d",&st[i].score);
        m+=st[i].score;
        getchar();
	 }
	 
     for(i=0;i<n;i++)
	 {
		 if(st[i].score<st[i+1].score)
            max=i+1;
	 }
         printf("The average score=%.2f\n",m/n);
		 printf("The student who has the highest score is:%c %s %d",st[max].ID,st[max].name,st[max].score);

return 0;

}
66.实验报告3
#include<stdio.h>
#include<stdlib.h>

typedef struct Student{
	char id[20];
	char name[30];
	int age;
	double score;
}Student;

int InputStu(Student *p,int n){
	int i;
	printf("Please input student number:");
	scanf("%d",&n);
	for(i=0;i<n;i++){
		scanf("%s %s %d %lf",p->id,p->name,&p->age,&p->score);
		p++;
	}
	return n;
}

void PrintStu(Student *p,int n){
	int i;
	for(i=0;i<n;i++){
		printf("%s %s %d %f\n",p->id,p->name,p->age,p->score);
		p++;
	}
}

int ReadStu(FILE *fp,Student *p,int n){
	int i=0;
	fread(p,sizeof(Student),1,fp);
	while(!feof(fp)){
		p++;
		fread(p,sizeof(Student),1,fp);
		i++;
	}
	return i;
}

void WriteStu(FILE *fp,Student *p,int n){
	fwrite(p,sizeof(Student),n,fp);
}

int main(){
	Student stu[50];
	int n=0;
	FILE *fp;
	//从键盘上获取学生的数据存入结构体数组
	/*
	fp=fopen("E:\\stu.txt","wb");
	if(!fp){
		printf("Open file failure!\n");
		exit(1);
	}
	n=InputStu(stu,n);
	fclose(fp);
	
	//PrintStu(stu,n);
	//将结构体数组中的学生数据写入到文件
	fp=fopen("E:\\stu.txt","wb");
	if(!fp){
		printf("Open file failure!\n");
		exit(1);
	}

	WriteStu(fp,stu,n);
	fclose(fp);
	*/
	//将文件中的数据读取到内存
	fp=fopen("E:\\stu.txt","rb");
	if(!fp){
		printf("Open file failure!\n");
		exit(1);
	}
	n=ReadStu(fp,stu,n);
	printf("Read %d Students.\n",n);
	fclose(fp);

	//对学生数据进行排序。
	
	//将排序后的学生数组存放到文件中
	fp=fopen("E:\\stu.txt","wb");
	if(!fp){
		printf("Open file failure!\n");
		exit(1);
	}

	PrintStu(stu,n);

	WriteStu(fp,stu,n);
	fclose(fp);
	return 0;
}

65.文件的读取和输出
//从文件读取C:\dream.text，输入到D:\dream.text
#include <stdio.h>
#include <stdlib.h>
int main()
{
FILE *fp;
FILE *p;
char ch;
fp=fopen("C:\\dream.text","r+");
p=fopen("D:\\dream.text","w+");
    if(fp==0)
 	{
	printf("ERROR\n");
    exit(1);
	}
ch=fgetc(fp);
while(!feof(fp))
{
fputc(ch,p);
ch=fgetc(fp);
}	
fclose(fp);
return 0;
}


//从文件读取C:\dream.text，屏幕输出
#include <stdio.h>
#include <stdlib.h>
int main()
{
FILE *fp;
char ch;
fp=fopen("C:\\dream.text","r+");
   if(fp==0)
   {
	   printf("ERROR\n");
	   exit(1);
   }

while((ch=fgetc(fp))!=EOF)
{
putchar(ch);
}
putchar('\n');
fclose(fp);
return 0;
}
64 课本p252
已知C：\computer.text中存放了学生的成绩，使用fscanf函数读取文件的内容，并输出至屏幕
#include<stdio.h>
#include<stdlib.h>
struct Student 
{
   int ID;
   char name[20];
   double score;
};
typedef struct Student Student;
int main()
{
   FILE *fp;
   Student st;
   fp=fopen("C:\\dream.text","r");
    if(fp==0)
	{
         printf("Error\n");
		 exit(1);
	}
	fscanf(fp,"%d%s%lf",&st.ID,st.name,&st.score); //先读一条记录
	while (!feof(fp))
	{
	fprintf(stdout,"%d %-8s\t%.2lf\n",st.ID,st.name,st.score);//用于文本文件的读写
    printf("%d %-8s\t%.2lf\n",st.ID,st.name,st.score); //stdout就是对应显示器的指针，stdin就是默认的对应键盘的指针
    fscanf(fp,"%d%s%lf",&st.ID,st.name,&st.score);
	}
	fclose(fp);
	return 0;
}
63 字符串的读写（fputs和fgets）
#include<stdio.h>
#include <stdlib.h>
int main()
{
  FILE *fp;
  char str[200];
  fp=fopen("C:\\dream.text","r");
  if(fp==0)
  {
  printf("Error");
  exit(1);
  }
  while ((fgets(str,200,fp))!=NULL) //fp是指针文件，200是读取的个数，str是首地址
	  printf("%s",str);

  putchar('\n');
  fclose(fp);
  return 0;

}
62.结构体数组
#include <stdio.h>
#include <string.h>
struct Student 
{
  int ID;
  char name[20];
  char sex;
  double score;
};
typedef struct Student Student;

int main()
{
	Student st[3]={{1001,"Zhang",'F',88},{1002,"Wang",'M',99}};
	int i;
	st[2].ID=1002;
	strcpy(st[2].name,"Li");
	st[2].sex='M';
	st[2].score=88;

	for(i=0;i<3;i++)
	{
	printf("%d %s %c %lf\n",(st+i)->ID,(st+i)->name,(st+i)->sex,(st+i)->score);
	}
return 0;
}
61 读出文本文件C：\dream.text的内容，并输出到屏幕上（字符读写）
#include <stdio.h>
#include <string.h>
int main()
{
    FILE *fp;
    char ch;
	fp=fopen("C:\\dream.text","r"); //以度的方式打开文件
	if(fp==0)
	{
	printf("Error\n");
	exit(1);
	}

	while ((ch=fgetc(fp))!=EOF)   //当读到结尾的时候，fgetc返回EOF，循环就结束
		                          //fgetc拿出一个字符给ch，判断是不是结尾
                           //fgetc功能，从fp指向的文件读取一个字符，成功就返回该字符，位置指针自动后移一个字节
	{
	putchar(ch);
	}
   putchar('\n');
   fclose(fp);
   return 0;
}

注：除了用while ((ch=fgetc(fp))!=EOF,判断结束以外，还可以用feof判断。
如：  
ch=fgetc(fp);
while(!feof(fp))
{
putchar(ch);
ch=fgetc(fp);
}

60 从键盘读入以#结尾的文件，输出到文本文件C：\dream.text中（字符读写）
#include <stdio.h>
#include <stdlib.h>
int main()
{
   FILE *fp; //如果编程要对一个文件操作，定义FILE指针文件，也叫文件指针
   char ch;
   fp=fopen("C:\\dream.text","w"); //将fp指向文件对应的结构变量
  
   if(fp==0)           //判断文件是否存在，是否有问题
   {
	   printf("filr Error\n");
	   exit(1);
   }

   printf("End the text with #.\n");
   ch=getchar();
   while(ch!='#')
   {
   fputc(ch,fp);    //fputc将字符ch输出到fp所指向的文件
   ch=getchar();
   }
 fclose(fp);           //文件的关闭
 return 0;

}

59课本p226例10.1.5 结构体应用
//从键盘上输入不超过10个人的信息，每个人的信息包括姓名，学号，成绩，
//要求按成绩从低到高输出学生的完整信息
#include <stdio.h>
struct Student 
{
   int ID;
   char name[20];
   double score;
};
typedef struct Student Student;

int input(Student[]);
void sort(Student[],int len);
void output(const Student [],int len);

int main()
{
   Student st[10];
   int num;
   num=input(st);
   output(st,num);
   sort(st,num);
   output(st,num);
   return 0;
}

int input(Student s[])   //Student s[]等价于Student *s,指向st的首地址
{
  int i,n;
  printf("please input the sum of the student.\n");
  scanf("%d",&n);
  for(i=0;i<n;i++)
  {
  printf("Enter %d-th student :",i+1);
  scanf("%d%s%lf",&s[i].ID,s[i].name,&s[i].score);//结构体数组应用
  }
 return n; //返回学生的人数
}

void sort (Student st[],int len)
{
   int i,k,index;
   Student temp;    //
   for(k=0;k<len-1;k++) //两两比较，所以k<n-1即可，因为第k-1个和第k个比较过了
   {
	   index=k;
       for(i=k+1;k<len;i++)
	   if(st[i].score<st[index].score)   //选择法排序
		   index=i;
	   
	   if(index!=k)
	   {
        temp=st[index];
	    st[index]=st[k];
	    st[k]=temp;
	   }
   }
}

void output (const Student s[],int len)
{
  int i;
  printf("学号 姓名 成绩\n");
  for(i=0;i<len;i++)
	  printf("%4d %-8s %.0f\n",s[i].ID,s[i].name,s[i].score);

}
58结构体指针的用法
#include <stdio.h>
#include <string.h>
struct Student 
{
int ID;
char name[20];
char sex;
double score;
};
typedef struct Student Student;

int main()
{
Student s1,*p;         //定义Strudent型的变量和指针
p=&s1;                 //定义结构体变量的地址给指针
s1.ID=2001;
strcpy(p->name,"Liang");
p->score=100;
p->sex='M';
printf("%lf%s%d%c\n",(*p).score,p->name,p->ID,(*p).sex);  //结构体打印的两种方式

return 0;

}

57密码问题，解密后，与预先设定的相同，则显示pass，否则警告
//用户输入密码，以#作为结束的标志。
//按一定规则解密后，若和预先设定的一致，就显示PASS，否则发出警告。
#include <stdio.h>
#include <string.h>
int check (char *ps)
{
char passwd[]="PLWRV";
int i=0;
int flag=1;
for( ; *ps!='\0'&&flag;ps++)
{
     if(*ps>='a'&&*ps<='z')
        *ps=*ps-32+2;
     if(*ps!=passwd[i])
        flag=0;
     else 
        i++;
}
return flag;
}


int main()
{
  char str[10];
  int i=0;
      printf("please input the keyword.\n");
  while((str[i]=getchar())!='#')   //逐个输入，得到#时作为结束的标志
  {
      i++;
  }
str[i]='0';
if(check(str))
   printf("pass");
else 
   printf("ERROR.\n\a\a\a");
return 0;
}
56例题10.3 结构体类型的运用（学生成绩信息的统计）
#include <stdio.h>
#include <string.h>
	struct Date
	{
	int year;
	int month;
	int day;
	};               //这里的分好特别容易漏掉，切忌
typedef struct Date Date;   //typedef给struct Date起了别名Date,下面调用时书写方便

    struct Student
{
    int ID;
    char name[20];
    Date birthday;     //结构体类型的嵌套，新增的日期，属于一个已经定义的结构体类型
    char sex;        //F是女性，M是男
    double score;
};
	typedef struct Student Student;

	
	int main()
	{
		Student s1={1001,"Zhu",{1991,3,12},'F',78};  //定义时直接初始化  结构体类型名+变量名 定义变量s1
	    Student s2,s3,s4;
		scanf("%d%s%d%d%%d%c%lf",&s2.ID,s2.name,&s2.birthday.year,&s2.birthday.month,&s2.birthday.day,&s2.sex,&s2.score);
		s3=s1;
		
		s4.ID=1004;
		strcpy(s4.name,"Liu");
		s4.birthday.year=1992;
		s4.birthday.month=7;
		s4.birthday.day=5;
		s4.sex='F';
		s4.score=80;


	printf("%d %s %d.%d.%d %c %lf\n",s1.ID,s1.name,s1.birthday.year,s1.birthday.month,s1.birthday.day, s1.sex,s1.score);
    printf("%d %s %d %d.%d %c %lf\n",s2.ID,s2.name,s2.birthday.year,s2.birthday.month,s2.birthday.day, s2.sex,s2.score);
	printf("%d %s %d %d.%d %c %lf\n",s3.ID,s3.name,s3.birthday.year,s3.birthday.month,s3.birthday.day, s3.sex,s3.score);
	printf("%d %s %d %d.%d %c %lf\n",s4.ID,s4.name,s4.birthday.year,s4.birthday.month,s4.birthday.day ,s4.sex,s4.score);

	return 0;
	}

55删除字符串中非数字元素

#include <stdio.h>
int main()
{
int i=0;
char *pa;
char a[200];
char b[200]={" "};      //一定要对数组初始化
   pa=a;
   gets(pa);
  while(*pa)
  {
  if(*pa>='0'&&*pa<='9')
     b[i++]=*pa++;
  else
	 pa++;
  }
  puts(b);
  return 0;
}



54 统计单词出现的次数（任意分隔符不会连续出现）
#include <stdio.h>
#include <string.h>
int search(const char *p,const char *pa)
{
   int i=0,count=0;
   char dest[20];
   while (*p)               //判断字符串是否结束
   {
	   int i=0;
    while((*p>='a'&&*p<='z')||(*p>='A'&&*p<='Z'))
	{
    dest[i++]=*p++;          //将待储存的单词存在dest中
	}
	dest[i]='\0';                //结束时加上结束的标志
	p++;
	if(strcmp(dest,pa)==0)      //比较是否是待统计的单词
		count++;
  }
   return count;
}


int main()
{
    char source[200];
    char key[20];
        
	puts("input the source.\n");
         gets(source);               //输入源数据
         
    puts("input the keyword.\n");
         gets(key);                 //输入待找的单词
    printf("%d",search(source,key));
	return 0;

}

53从键盘上输入一个字符串，判断是否是回文
（回文就是去掉字符串后中心对称的）
#include <stdio.h>    
#include <string.h>
int Judgehuiwen(const char *str) //用const保护行参
{

int i=0,j=strlen(str)-1;     //i从数组的开始进行，j从数组的尾部进行，注意读取最后一个元素一定是j-1,j指向最后一个元素的尾部

while (i<j)
{
   while(str[i]==32)        //32是空格的代码，如果是空格就跳过
       i++;
   while(str[j]==32)
       j--;
   if(str[j]==str[i])
   {
      i++;j--;
   }
else return (0);
}
    return (1);
}
                                 
int main()
{
char str[20];
gets(str);
if(Judgehuiwen(str))
printf("it is huiwen.\n");
else 
printf("it is not huiwen.\n");
return 0;


}
52 题目1 用行指针实现二维数组的传递，求矩阵对角元素的和（行指针变量初始化指针变量pa）
   题目2 用列指针实现二维数组的传递，求矩阵对角元素的和（列指针初始化指针变量pa）

题目1
#include <stdio.h>
int sum(int (*pa)[3],int n)      //注意  int (*pa)[3] ，是行指针变量，和                            {                           //  printf("%d",sum(a,n));中的a及行指针名保持一致

                              //定义行指针变量pa，它的指向是长度为3的一维整             int i;                          数组，执行pa+1时，向下移动一行
  int t=0;
  for(i=0;i<n;i++)
  t+=pa[i][i];              //定义了行指针后此时pa相当于数组名a,可以直接调用pa[i][i]                         访问数组的对角线元素
  return t;
}

int main()
{
int n,i,j;
int a[3][3];

   printf("please input n. \n");     //输入传递二维数组的行数
   scanf("%d",&n);

   
   for(i=0;i<n;i++)
   for(j=0;j<n;j++)
   scanf("%d",&a[i][j]);
		  
   printf("%d",sum(a,n));           //调用时用二维数组名a初始化行指针变量pa

return 0;
}
题目2 
#include <stdio.h>

int sum(int *pa,int n)          //*pa是列地址
{
  int i,j;
  int t=0;
  for(i=0;i<n;i++)
  t+=*(pa+i+i*3);              //用列指针访问数组元素的方式，假设数组是a[5][5],则其对角线的元素和是t+=*(pa+i+i*5).    如果想要访问全部的元素，则用for(i=0;i<n*n;i++)  *(pa+i);即可

   return t;
}

int main()
{
int n,i,j;
int a[3][3];

   printf("please input n. \n");     
   scanf("%d",&n);

   
   for(i=0;i<n;i++)
   for(j=0;j<n;j++)
   scanf("%d",&a[i][j]);
		  
   printf("%d",sum(a[0],n));       //调用列指针a[0]初始化指针变量*pa
return 0;
}



51 从键盘上读入3个字符串，将字符串从小到大排序，并输出排序后的字符串
#include<stdio.h>
#include <string.h>
void sort(char *pa[],int n);
void print(char *pa[],int n);         //输入10个字符串，进行排序

int main()
{
	char array[3][20];
	char *pa[3];
    int n=3,i;

	for(i=0;i<n;i++)
	{
   pa[i]=gets(array[i]);         //体会一维指针数组的赋值方式
	}
 //   for(i=0;i<n;i++)
 //   gets(array[i]);
 //   for(i=0;i<n;i++)
 //   pa[i]=array[i];              //一维指针数组的赋值，为指针数组的每一个元素赋值
                       //二维指针的输入必须指出它的行数
    sort(pa,n);
   print(pa,n);
return 0;
}

void sort(char *pa[],int n)
{
int i,j,k;
char *temp;
    for(i=0;i<n-1;i++)
	{
    k=i;
	for(j=i+1;j<n;j++)
		if(strcmp(pa[k],pa[j])>0)
			k=j;
		if(k!=i)
		{
		temp=pa[k];
		pa[k]=pa[j];
		pa[j]=temp;
		
		}
	}

}
void print(char *pa[],int n)
{
int i;
for(i=0;i<n;i++)
printf("%s",pa[i]);
}

50 多个字符串的排序
方法一（用二维数组实现）：
#include <stdio.h>
#include <string.h>
void sort(char (*str)[10],int n);
int main()
{   
	int n,i;
	char str[][10]={"abc","bcd","cde","adb"};
	printf("please input the n.\n");
	scanf("%d",&n);
	sort(str,n);
	for(i=0;i<n;i++)
	printf("%s\n",str[i]);     //a[i]表示二维数组中第i个字符串的首地址
	return 0;

}
void sort(char (*str)[10],int n)
{
   int i,j,k;
   char temp[20];
   for(i=0;i<n-1;i++)                   // 选择法排序，此处N-1非常重要，考试会考，见书本118页
   {
   k=i;                          //K表示最小项的下标
   for(j=i+1;j<n;j++)
	   if(strcmp(str[k],str[j])>0)   //比较字符串的大小
		   k=j;                        // 得到本趟中最小的下标
	   if(k!=i)                  //如果最小项不是本次循环的起始项，则把当前的最小项交换到位
	   {
	   strcpy(temp,str[i]);
	   strcpy(str[i],str[k]);
	   strcpy(str[k],temp);
	    }
   }
}

方法二（用一维指针实现）：
#include <stdio.h>
#include <string.h>
void sort(char *pa[],int n);
int main()     //用一维数组给字符串排序
{
	char *pa[200]={"abc","bcd","cde"};
    int n=3,i;
    sort(pa,n);
	for(i=0;i<n;i++)
	printf("%s\n",pa[i]);
	return 0;
}

void sort(char *pa[],int n)
{
   char *temp;
   int i,j,k;
    for(i=0;i<n-1;i++)
	{
         k=i;                              //选择法排序，每次循环过程中找到当次循环中最小元素的下标，把它放到相应的位置。
     for(j=i+1;j<n;j++)
		 if(strcmp(pa[k],pa[j])>0)
			 k=j;
		 if(k!=i)
		 {
			temp=pa[k];
		    pa[k]=pa[j];
		    pa[j]=temp;
		 }
	}
}
49 动态申请一维数组的用法
#include <stdio.h>
#include <stdlib.h>
int main()
{
int i,n;
int *pa;
  scanf("%d",&n);
  pa=(int *)malloc(n*sizeof(int )); //用pa申请大小为n的动态一维数组；
for(i=0;i<n;i++)
  scanf("%d",&pa[i]);
for(i=0;i<n;i++)
  printf("%d",pa[i]);
  return 0;
}

48 大致了解strlen strcpy strcat strcmp strupr strlwr的用法
书P178 程序8.4
#include <stdio.h>
#include <string.h>
int main()
{
char str[20]="Programme.";
char cstr[20];
char temp[20];
int i;
    printf("Please input the string.\n");
    gets(cstr);                             //输入cstr
     if(strcmp(str,cstr)>0);           //调用strcpy，比较字符串的大小，如果str大于cstr返回1，否则返回0
	 {
         strcpy(temp,str);
         strcpy(str,cstr);
         strcpy(cstr,temp);
	 }
 strcat(cstr,"**");               //调用strcat连接字符串
 i=strlen(cstr);
    if(i+strlen(str)<20)          //调用strlen防止两个字符串的和下标越界
	{
		strcat(cstr,str);        //把两个字符串连接在一起；
	    puts(cstr);
	}
    else 
 printf("Wrong input.");
	strupr(cstr);                //调用strupr将小写转为大写
	puts(cstr);
	return 0;

}

47 调用该二维数组读入和输出多个字符串
#include <stdio.h>
int main()
{
char a[20][20];
int i;
    for(i=0;i<5;i++)
     gets(a[i]);
    for(i=0;i<5;i++)
     puts(a[i]);
return 0;
}

46 自定义strcpy字符串的复制
#include <stdio.h>
char* my_strcpy(char* p,char* pa);
int main()
{
char a[20],b[20];
char *p,*pa;
   p=a;pa=b;
   gets(p);
   gets(pa);
   my_strcpy(p,pa);

  puts(p);
return 0;
}

char* my_strcpy(char* p,char* pa)
{
int i=0;
while(pa[i]!='\0')
{
p[i]=pa[i++];
}
pa[i]='\0';
return (p);

}

45.自定义strcat字符串连接
#include <stdio.h>
char* my_strcat(char *p,char *pa);
int main()
{
char a[20],b[20];
char *p,*pa;
p=a;pa=b;
gets(p);
gets(pa);

my_strcat(p,pa);

puts(my_strcat(p,pa));

return 0;
}

char* my_strcat(char *p,char *pa)
{
int i=0;
while (p[i]!='\0')
i++;                    //循环结束后，i指向目标串的结尾处
while(*pa!='\0')
*(p+i++)=*pa++;          //将第二个目标串赋值到第一个目标串的结尾处
*(p+i)='\0';   //在目标串最后加上结束的标志
return(p);
}

44. 申请动态一维数组和二维数组

43.（有序）数组中插入元素
 #include <stdio.h>
#define N 20

void insertelement(int a[],int m,int n);

int main()
{
    int a[N]={1,2,4,5,6,7,8,9};
    int n=8,m;
    printf("please input m.\n");
    scanf("%d",&m);
   	insertelement(a,m,n);  //调用插入函数
    
     return 0;
}

void insertelement(int a[],int m,int n)
{
    int i,j;
    for (i=0;i<n;i++)
	{
        if(a[i]<m&&m<a[i+1])
		{
            for (j=n;j>i;j--)           //数组向后移动
                a[j]=a[j-1];
        
		a[i+1]=m; 
		break;
		}
	else continue;
    }
    for (i=0;i<n+1;i++)
        printf("%d ",a[i]);
}
42 用数组解决问题Fibonacci
（比如数字 1 1 2 3 5 8 13 21 ...）
#include <stdio.h>
int main()
{
    int n;
    int count=2;
    int rabbit[1000]={1,1}; 
    n=1;
	printf("%10d%10d",rabbit[0],rabbit[1]);  //第一个数和第二个数特殊考虑，因为通项中不 包括第一个第二项
    while(rabbit[n]<=1000)
    {
        n++;
        rabbit[n]=rabbit[n-1]+rabbit[n-2];
        printf("%10d",rabbit[n]);
        count++;
        if(count%5==0)
            printf("\n");
    }
	printf("\n");
    return 0;
}
41 输入一个数和它的位数，计算各个数位之和
#include<stdio.h>
int sumdight(int a,int n);
int main()
{
    int sum,a,n;
	printf("please input the number and n.\n");  //输入一个数和它的位数
    scanf("%d %d",&a,&n);
    sum=sumdight(a,n);
     printf("%d",sum);
    return 0;
}
int sumdight(int a,int n)
{
    int i,sum=0;
    for (i=1;i<=n;i++)
   {
       int m;
        m=a%10;
    if(!m)break;          //妙，当m等于0的时候，执行该语句，break跳出该循环
    a=a/10;
    sum+=m;
}
   return sum;
}

40 打印等腰三角形
#include<stdio.h>
int main()
{
int i,j,n;
scanf("%d",&n);
for(i=1;i<n;i++)
{
	for(j=1;j<n-i+1;j++)
		printf(" ");
	for(j=1;j<=2*i-1;j++)
		printf("c");
	printf("\n");
}
return 0;
}



34
3025.窗体顶端
2窗体底端
39 约瑟夫环问题
n个人围成一圈。从第一个人开始报数（由1到n），报到M的人退出圈子，问最后留下的是原来的第几号的那个人。（提示：根据人数建立动态数组。假设每次从下标i开始叔叔，那么删除下标是(i+m-1)%n,知道n为1就是留下的那个人）
#include <stdio.h>
#include <stdlib.h>
int main()
{
int i,j,n,m,*pa;
printf("please input m,n\n");
scanf("%d%d",&n,&m);
pa=(int *)malloc(n*sizeof(int ));      //建立动态数组
if(pa==NULL)
{
printf("allocation failure\n");
exit(1);
}
for(i=0;i<n;i++)
pa[i]=i+1;
i=0;
while(n>1)
{
i=(i+m-1)%n;
printf("%-4d",pa[i]);
for(j=i+1;j<n;j++)
pa[j-1]=pa[j];
n--;
if(i==n)
i=0;
}
printf("%d",pa[0]);
free(pa);
return 0;
}



38 调用strlen获取字符串的长度
#include <stdio.h>
unsigned int strlen(const char *pa);
int main()
{
	char a[100];
    char *pa;
	pa=a;
	gets(pa);
    strlen(pa);
	printf("%d",strlen(pa));
return 0;

}
unsigned int strlen(const char *pa)
	{
	int i=0;
	while(pa[i])
		i++;
	return i;
	}

37.书本例8.2 p174
输入一组字符串，统计字母空格数字的个数
#include <stdio.h>  
int main()
{
char a[100];
char *p;
int character=0,number=0,space=0,other=0;
p=a;
printf("please input .\n");
gets(p);

while(*p!='\0')    //指针遇到\0是结束，控制字符数组的结束
{
if((*p>='A'&& *p<='Z')||(*p>'a'&& *p<'z'))
character++;
else if((*p>'0')&&(*p<'9'))
number++;
else if(*p==' ')
space++;
else
other++;
p++;
}
printf("character is %d,number is %d,space is %d,other is %d\n",character,number,space,other);
return 0;
}





36.输入数组，删去最大最小以后输出剩余的元素
#include<stdio.h>
void deletemaxmin(int a[],int n);
int main()
{
   int a[100],i,n=5;
   int count=0;
      for(i=0;i<n;i++)
         scanf("%d",&a[i]);
   deletemaxmin(a,n);
return 0;
}
void deletemaxmin(int a[],int n)
{
    int i,min=a[0],max=a[0];
        for(i=0;i<n;i++)
		{
			if (a[i]>min)
				min=a[i];
			if(a[i]<max)
				max=a[i];
		}
            for(i=0;i<n;i++)
			{
			if(a[i]!=max&&a[i]!=min)
			printf("%d",a[i]);
			}
		


35.将数列向后移动M位置。
（如{1,2,3,4,5,6,7,8,9,10}向后移动3位变成{8,9,10,1,2,3,4,5,6,7}）
#include<stdio.h>
void sort(int a[],int n,int m); 
35.窗体顶端
int a[30]={1,2,3,4,5,6,7,8,9,10};
int m,n=10;
scanf("%d",&m);
sort(a,n,m);
return 0;
}

void sort(int a[],int n,int m)
{
     int i,j;
	 for(j=0;j<m;j++)
	 {
	     for(i=n;i>0;i--)
		 {
		 a[i]=a[i-1];
		 }
	     a[0]=a[n];
		 
	 }
	 for(i=0;i<n;i++)
		 printf("%d",a[i]);
}

34.判断一个矩阵是否对称
法一：
#include<stdio.h>
void input(int a[20][20],int n);
int judge(int a[20][20],int n);
int main()
{
int a[20][20];
int n;
printf("please input n.\n");
scanf("%d",&n);
input(a,n);
judge(a,n);
if(judge(a,n))
printf("yes");
else 
printf("no");

return 0;
}

void input(int a[20][20],int n)
{
int i,j;
for(i=0;i<n;i++)
{
	for(j=0;j<n;j++)
	{
	scanf("%d",&a[i][j]);
	}
}
}

int judge(int a[20][20],int n)
{
int i,j;
int flag=1;
for(i=0;i<n;i++)
{
       for(j=0;j<=i;j++)
	   {
        if(a[i][j]!=a[j][i])
			return 0;
	   }

}
return 1;
}
法二：
#include <stdio.h>
#define N 3
int Judge(int (*a)[N])
{
     int i,j;
	 int flag=1;
	 for(i=0;i<N&&flag;i++)
		 for(j=0;j<i;j++)
		 {
		      if(a[i][j]!=a[j][i])
			  {
		         flag=0;
	         	 break;
			  }
		 }
		 return flag;
}

void input(int (*a)[N])
{
     int i,j;
	 for(i=0;i<N;i++)
		 for(j=0;j<N;j++)
			 scanf("%d",&a[i][j]);

}
void output(const int (*a)[N])
{
int i,j;
 for(i=0;i<N;i++)
		 for(j=0;j<N;j++)
			 printf("%d",&a[i][j]);

}

int main()
{
int a[N][N];
input(a);
output(a);
if(Judge(a))
     printf("Yes");
else 
     printf("No");
return 0;

}
33.例7.11
储存成绩以及查询不及格
#include <stdio.h>
#define N 20
void input (int score[],int num[],int n);
int find(int score[],int num[],int n);
int main(){
	int score[N]={0};
	int num[N]={0};
	int n=4,fail;
	input(score,num,n);
	fail=find(num,score,n);
	printf("%d",fail);
	return 0;
}

void input (int pscore[],int pnum[],int n)
{
int i;
for(i=0;i<n;i++){
scanf("%d%d",pscore+i,pnum+i);
}
}
int find(int score[],int num[],int n)
{
int i,count=0;
for(i=0;i<n;i++){
	if(score[i]<60)
	{
		count++;
	printf("%d %d\n",num[i],score[i]);
	}
}
return count;
}


32.例7.5
用返回值和返回指针的方法得到两个数中的大数和小数
#include <stdio.h>
int *smaller(int *x,int *y);
int larger(int x,int y);
int main(){
int a,b,*small,big;
scanf("%d %d",&a,&b);
small=smaller(&a,&b);

big=larger(a,b);

printf("%d %d",*small,big);
return 0;
}
int *smaller(int *x,int *y){

if(*x>*y)
return y;
return x;
}
int larger(int x,int y){

if(x>y)
return x;
return y;
}

31.十进制转二进制（数组法）
#include <stdio.h>
int main(){
	int a[20]={0};
	int *p=a;
	int m;
	scanf("%d",&m);
	while(m!=0){
	*p=m%2;
	m=m/2;
	p++;
	}
	printf("the binary is ");
	p--;
	for( ;p>a;p--)
	printf("%d",*p);
	return 0;

}

30.输入3个数，删去最大最小的数，输出剩下的数
#include <stdio.h>              
#define N 30
int max(int a[],int n);
int min(int a[],int n);
int main()
{
int i,n=3,t=0;
int a[N]={0};
for(i=0;i<3;i++)
scanf("%d",&a[i]);

for(i=0;i<n;i++)
if(a[i]!=max(a,n)&&a[i]!=min(a,n) ){
printf("%d\n",a[i]);
}

return 0;
}

int max(int a[],int n)
{
int i,t;
t=a[0];
for(i=0;i<n;i++){
if (t<a[i])
t=a[i];
}
return t;
}

int min(int a[],int n)
{
int i,m;
m=a[0];
for(i=0;i<3;i++)
 if (m>a[i])
m=a[i];

return m;
}

29.冒泡排序
#include <stdio.h>
void bubblesort(int arr[],int n);
int main()
{
    int arr[]={3,2,4,6,5,1,9,8,7};
    int n=9;
    bubblesort(arr,n);
    return 0;
}
void bubblesort(int arr[],int n)
{
    int i,j,t;
    for (i=0;i<n;i++){
        for(j=0;j<n-1;j++){
             if(arr[j]>arr[j+1]){
                 t=arr[j];
            arr[j]=arr[j+1];
            arr[j+1]=t;
             }
           }
    }
       for(i=0;i<n;i++)
        printf("%d ",arr[i]);
}


28.删除数组中的一个数
#include <stdio.h>
int shanchu(int arr[],int x,int n);
int main()
{
    int i;
    int arr[]={1,6,10,15,33,56};
    int n=6,x;
    scanf("%d",&x);
 if(shanchu(arr,x,n));
 for (i=0;i<shanchu(arr,x,n);i++)
    printf("%d ",arr[i]);


    return 0;
}
int shanchu(int arr[],int x,int n)
{
    int i,j;
    for(i=0;i<n;i++){
            if(arr[i]==x){
                for(j=i;j<n;j++)
                    arr[j]=arr[j+1];
            }

        }
        return n-1;

}

27.编写函数fun,求a到b以内能被7或者11整除，但不能被7和11同时整除的的所有数，把它们放在数组里，函数返回这些数的个数，输入a,b的值，并调用函数计算
#include <stdio.h>
#define N 100
int fun (int arr[],int a,int b);
int main()
{
    int a,b,i;
    int arr[N]={0};
    do{
        scanf("%d%d",&a,&b);
    }while(a<1||b>1000);
    if(fun(arr,a,b));
    for(i=0;i<fun(arr,a,b);i++)
    printf("%d ",arr[i]);
    return 0;
}
int fun (int arr[],int a,int b)
{
    int i,j=0,count=0;
    for (i=a;i<b;i++){
        if((i%7==0||i%11==0)&&i%77!=0){
           arr[j]=i;
           j++;
           count++;
        }
    }
    return count;
}


26.输出杨辉三角形
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 5 1
#include <stdio.h>
#define N 20
int main()
{
int i,j,n=0;
int a[N][N]={0};
scanf("%d",&n);
for(i=0;i<n;i++)
    a[i][0]=1;
for(i=1;i<n;i++){
    for(j=1;j<=i;j++){
        a[i][j]=a[i-1][j-1]+a[i-1][j];
    }
}
for(i=0;i<n;i++)
    {
    for(j=0;j<=i;j++)
        printf("%5d",a[i][j]);
        printf("\n");
    }
return 0;
}

25.利用数组知识，输入20个数，去掉最大最小的数，求剩下数平均值
#include <stdio.h>
int findmax(int a[],int n);
int findmin(int a[],int n);
void average(int max,int min,int a[],int n);
int main()
{
    int i,a[20]={0},n=20;
    int max,min;
    for(i=0;i<20;i++)
    {
        scanf("%d",&a[i]);
    }
   max=findmax(a,n);
   min=findmin(a,n);
   average(max,min,a,n);
   return 0;

}
int findmax(int a[],int n)
{
    int i,max=a[0];
    for (i=0;i<n;i++)
         if(a[i]>max)
            max=a[i];
      return max;
}
int findmin(int a[],int n)
{
    int i,min=a[0];
    for (i=0;i<n;i++)
            if(a[i]<min)
                min=a[i];
      return min;
}
void average(int max,int min,int a[],int n)
{
    int i,count=0;
    double sum=0.0;
    for (i=0;i<n;i++){
        if(a[i]!=max&&a[i]!=min)
        {
            sum+=a[i];

            count++;
        }
    }

    printf("count=%d,average=%.2f\n",count,sum/count);
}
24.插入数组元素
 书P114 例6.8
#include <stdio.h>
#define N 20
void print(int a[],int n);
void BubbleArray(int a[],int n);
void insertElement(int a[],int x,int n);
int main()
{
    int n=8;
    int a[N]={9,3,1,4,2,7,6,8};
    BubbleArray(a,n);
    insertElement(a,5,n);

    return 0;
}
void BubbleArray(int a[],int n)
{
    int i,j,t;
    for (i=0;i<n;i++){
        for(j=i+1;j<n;j++){
            if (a[i]>a[j]){
               t=a[i];
               a[i]=a[j];
               a[j]=t;
            }
        }
    }
    print(a,n);
    printf("\n");

}
void print (int a[],int n)
{
    int i;
    for (i=0;i<n;i++)
        printf("%d ",a[i]);
}
void insertElement(int a[],int x,int n)
{
    int i,j;
    for(i=0;i<n;i++){
        if(x>a[i]&&x<a[i+1]){
            for(j=n;j>i;j--){
                a[j]=a[j-1];
            }
               a[i+1]=x;
        }

    }
    print(a,n);
}

23.将数组中的数按照从小到大的顺讯排序，并输出排序后的元素
#include <stdio.h>
#define N 20
void print(int a[],int n);
void BubbleArray(int a[],int n);
int main()
{
    int n=9;
    int a[N]={9,3,1,4,2,7,6,8,5};
    BubbleArray(a,n);
    return 0;
}
void BubbleArray(int a[],int n)
{
    int i,j,t;
    for (i=0;i<n;i++){
        for(j=i+1;j<n;j++){
            if (a[i]>a[j]){
               t=a[i];
               a[i]=a[j];
               a[j]=t;
            }
        }
    }
    print(a,n);

}
void print (int a[],int n)
{
    int i;
    for (i=0;i<n;i++)
        printf("%d",a[i]);
}
22.将数组中的数按照从小到大的顺讯排序，并输出排序后的元素
#include <stdio.h>
#define N 20
void print(int a[],int n);
void sortArray(int a[],int n);
int main()
{
    int n=9;
    int a[N]={9,3,1,4,2,7,6,8,5};
    sortArray(a,n);
    return 0;
}
void sortArray(int a[],int n)
{
    int i,j,t;
    for (i=0;i<n;i++){
        for(j=i+1;j<n;j++){
            if (a[i]>a[j]){
               t=a[i];
               a[i]=a[j];
               a[j]=t;
            }
        }
    }
    print(a,n);

}
void print (int a[],int n)
{
    int i;
    for (i=0;i<n;i++)
        printf("%d",a[i]);
}

21.利用数组判断数组中的一个数a在数组中的下标，如果没有，输出”not present.”
书本P112 例6.7
#include <stdio.h>
#define N 10
int Find(int a[],int x,int n);
int main()
{
    int a[N]={1,2,3,4,5,6,7,8,9};
    int n=9,pos;
    pos=Find(a,5,n);
    if (pos==-1)
        printf("Not present.");
    else
        printf("%d",pos);
    return 0;
}
int Find(int a[],int x,int n)
{
    int i;
    for(i=0;i<n;i++)

        if(x==a[i])
            return i;

        return -1;

}

20.P99 3
#include <stdio.h>
void drawpic (int n,int c);
int main()
{
    int n;
    char c;
    scanf("%d %c",&n,&c);
    drawpic(n,c);
    return 0;
}
void drawpic (int n,int c)
{
    int i,j;
    for(i=1;i<=n;i++)
    {
        for(j=n;j>=i;j--)
            printf(" ");
        for(j=1;j<=2*i-1;j++)
           {
            printf("%c",c);
           }
            printf("\n");
    }

19.输入分数，判断等级
#include <stdio.h>
int main()
{
    int score;
    char grade;
    printf("please input the score.\n");
    scanf("%d",&score);
    if(score<0||score>100)
        printf("Error input.");
        else
    {
        switch(score/10)
        {
            case 10:
            case 9:grade='A';break;
            case 8:grade='B';break;
            case 7:grade='C';break;
            case 6:grade='D';break;
            case 5:
            case 4:
            case 3:
            case 2:
            case 1:
            case 0:
            grade='E';break;
            }
            printf("the %d is %c.",score,grade);
    }
    return 0;
}

18.例题6.4
#include <time.h>
#include <stdlib.h>
#define ROW 3
#define COL 4
int main()
{
    int array_a[ROW][ COL];
    int array_b[ COL][ROW];
    int i,j;
    srand(time(NULL));
    for(i=0;i< ROW;i++)
    {
        for(j=0;j< COL;j++)
            array_a[i][j]=rand()%100+1;
    }
    printf("before transpose:\n");
      for(i=0;i< ROW;i++)
    {
        for(j=0;j< COL;j++)

        printf("%4d",array_a[i][j]);
        printf("\n");
           }
            for(i=0;i< ROW;i++)

        for(j=0;j< COL;j++)
           array_b[i][j]=array_a[j][i];

    printf("after transpose:\n");
     for(i=0;i< ROW;i++)
    {
        for(j=0;j< COL;j++)
           printf("%4d",array_b[i][j]);
           printf("\n");
    }
    return 0;

}


17.例题6.2
#include <stdio.h>
int main()
{
    double sum=0.0,average;
    int n,k;
    float score[50];
    printf("please input n.\n");
    do
    {
        scanf("%d",&n);
    }while(n<1||n>50);
    printf("please input the score.\n");
    for (k=0;k<n;k++)
    {
        scanf("%f",&score[k]);
        sum+=score[k];

    }

        average=sum/n;
        printf("the average is %f.\n",average);
        return 0;


}
16.例题6.1
#include <stdio.h>
int main()
{
    int i;
    int score1[5]={99,98,97,96,95};
    int score2[5];
    printf("the score 1 is :");
    for(i=0;i<5;i++)
        printf("%5d",score1[i]);
        printf("\n");
    for(i=0;i<5;i++)
        scanf("%d",&score2[i]);
    printf("the score2 is :");
    printf("\n");
    for(i=0;i<5;i++)
        printf("%5d",score2[i]);
    printf("the new score1 is :");
    printf("\n");
    score1[5]=score2[5];
    for(i=0;i<5;i++)
        printf("%5d",score1[i]);
        printf("\n");
    return 0;
}

15.验证哥德巴赫猜想，2000以内的正偶数（大于等于4）都能分解成两个质数的和。每个偶数表达式形如4=2+2的形式，每行输出4个偶数及其分解结果
#include <stdio.h>
#include<math.h>
int Judgeprime(int );
int main()
{
    int m,j;
    int count=1;
    printf("%4d=%4d+%4d",4,2,2);
    printf(" ");
    for (m=6;m<=2000;m=m+2)
    {
       for(j=3;j<=m;j=j+2)
        if(Judgeprime(j)&&Judgeprime(m-j))
          {
        printf("%4d=%4d+%4d",m,j,m-j);
        printf(" ");
        count++;
        if(count%4==0)
        printf("\n");
        break;
          }
    }
    return 0;
    }
    int Judgeprime(int n)
    {
        int i,k;
        if(n==1)
        {
            return 0;
        }
        k=(int)sqrt(n);
        for(i=2;i<=k;i++)
        if(n%i==0)
            return 0;
            return 1;

    }

14.调用函数，求任意给定N位的水仙花数
#include <stdio.h>
#include <math.h>
int sxhs(int m,int n);
int main()
{
    int m,n,t;
    printf("Please input m.\n");
    scanf("%d",&m);
    for(n=pow(10,m-1);n<=pow(10,m)-1;n++)
   {
     t=sxhs(m,n);
     if(n==t)
    printf("%d\n",n);
   }
    return 0;
}
int sxhs(int m,int n)
{
    int sum=0,i;
    for(i=1;i<=m;i++)
   {
    sum+=pow(n%10,m);
    n=n/10;
   }
   return sum;

}
13.调用函数求三位的水仙花数
  #include <stdio.h>
int sxhs(int m);
int main()
{
    int m,t;
    for(m=100;m<=999;m++)
   {
       t=sxhs(m);
       if(t)
    printf("%d\n",m);
   }
    return 0;
}
int sxhs(int m)
{
    int a,b,c;
    c=m%10;
    b=m/10%10;
    a=m/100;
    if(a*a*a+b*b*b+c*c*c==m)
        return 1;
        else
            return 0;
}

12.用自定义函数求二次项定理的值
#include <stdio.h>
#include <math.h>
double sum(double,double,double);
double Term(int n,int b,double a,int r);
double Comb(int n,int r);
double Fact(int n);
int main()
{
    double t;
    int a,b,n;
    scanf("%d %d %d",&a,&b,&n);
    t=sum(a,b,n);
    if(b>0)
        printf("(%d+%d)^%d=%lf",a,b,n,t);
    else
        printf("(%d%d)^%d=%lf",a,b,n,t);
    return 0;
}
double sum(double a,double b,double n)
{
    int r;
    double t=0.0;
    for (r=0;r<=n;r++)
        t+=Term(n,b,a,r);
    return t;
}
double Term(int n,int b,double a,int r)
{
    double t;
    t=Comb(n,r)*pow(a,n-r)*pow(b,r);
    return t;
}
double Comb(int n,int m)
{
    return (Fact(m)/Fact(n)/Fact(m-n));
}
double Fact(int n)
{
    double f=1.0;
    int i;
    for(i=1;i<=n;i++)
        f*=i;
    return f;
}
11.用静态局部变量求解1到N的阶乘
#include <stdio.h>
int fun(int n)
{
   static int t=1;
    t=t*n;
    return t;
}
int main()
{
    int n,i;
    printf("Please input n.\n");
    scanf("%d",&n);
 for (i=1;i<=n;i++)
 {
     printf("%d is %d.\n",i,fun(i));
 }
 return 0;
}

10.用静态局部变量求解1到5的阶乘
#include <stdio.h>
int fun(int n)
{
    static int f=1;
    f=f*n;
    return f;
}
int main()
{
    int i,m;
    for(i=1;i<=5;i++)
    {
      m=fun(i);
    printf("%d! = %d \n",i,m);
   }
return 0;
}9.调用一个函数sumdight求各位数字之和（循环终止条件遇到数字0或者满了5位）
#include<stdio.h>
int sumdight(int);
int main()
{
    int sum,a;
    scanf("%d",&a);
    sum=sumdight(a);
     printf("%d",sum);
    return 0;
}
int sumdight(int a)
{
    int i,sum=0;
    for (i=1;i<=5;i++)
   {
       int m;
        m=a%10;
    if(!m)break;
    sum+=m;
    a=a/10;
}
   return sum;
}
8.数制转换。将一个十进制转为制定的B(2<=B<=16）进制数
法一：
#include <stdio.h>
int main()
{
int a[16];
int *p=a;      //定义指针指向数组
int m;
    printf("please input m.\n");
    scanf("%d",&m); //输入待转换的整数

while(m!=0)
{
  *p=m%2;
  m=m/2;
  p++;
}

p--;               //指向最后得到的那个余数，因为循环结束后指针指向数组最后一个元  素的尾部，输出时要从最后一个元素输出，所以P--，，向前传一位
for( ;p>=a;p--)   //逆序输出转换后的二进制的值
    printf("%d",*p);

return 0;
}

法二：
#include <stdio.h>

void Multibase(int,int);
int main()
{
    int n,B;
    do
    {
        scanf("%d %d",&n,&B);
    }while (n<=0||B>16);
    printf("the result is \n");
    Multibase(n,B);
    printf("\n");
    return 0;
}
void Multibase(int n,int B)
{
    int m;
    if(n)
    {
        Multibase(n/B,B);
        m=n%B;
        if(m<10)
            printf("%d",m);
        else
            printf("%c",m+55);
    }
}
7.用递归发求N的阶层
include <stdio.h>
    double Fact(int n)
{

    if(!n)
    {
        return 1;
    }
    return (n*Fact(n-1));
}
int main()
{
    int n;
    double t;
    scanf("%d",&n);
    t=Fact(n);
    printf("%d!=%lf\n",n,t);
    return 0;
}

6.自定义函数，判断一个数是不是质数
#include <stdio.h>
#include <math.h>
int Judgeprime(int);
int main()
{
int m;
printf("Please input integer.\n");
do
{
    scanf("%d",&m);
}while(m<0);
if (Judgeprime (m))
    printf("the %d is a prime.",m);
    else
    printf("the %d is not a prime.",m);
return 0;
}
int Judgeprime(int n)
{
    int k,i;
    int judge=1;
    k=(int)sqrt(n);
    for(i=2;i<=k;i++)
    {
        if (i%k==0)
            judge=0;
    }
    return judge;
}
5.调用函数，输入横线
#include <stdio.h>
void Drawline(int n)
{
    int i;
    for(i=1;i<=n;i++)
       {
           printf("-");
       }
        printf("\n");
    return ;
}
int main()
{
    int n;
   scanf("%d",&n);
   Drawline(n);
   printf("C is a beautiful language.\n") ;
   Drawline(n);
   return 0;

}
4.调用函数，判断输入的是不是质数
#include <stdio.h>
#include <math.h>
int judgeprime(int n)
{
    int i,k;
    int prime=1;
    if(i==0)
        prime=0;
    k=(int)sqrt(n);
    for(i=1;i<=k;i++)
        if(n%i==0)
            prime=0;
    return prime;
}
int main()
{
    int m;
    printf("please input m.\n");
    scanf("%d",&m);
    if(m<=0)
        printf("Error input.");
    else
    {
        if (judgeprime(m))
            printf("%d is a prime.\n",m);
            else
            {
                printf("%d is not a prime.\n",m);
            }
    }
    return 0;
}

3.月份天数计算。输入年月，计算该月的天数。
#include <stdio.h>
int main()
{
    int month,year,daysum;
    printf("please input date:\n");
    scanf("%d%d",&year,&month);
    switch (month)
    {
    case 1:
        case 3:
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            daysum=31;
            break;

        case 4:
        case 6:
        case 9:
        case 11:
            daysum=30;
            break;

        case 2:
            if((year/400==0)||(year/4==0&&year/100!=0))
            {
                daysum=29;
            }
            else
            {
                daysum=28;
            }
    }
            printf("%d.%d has %d days.\n",year,month,daysum);
            return 0;


}

2.输入三条边，判断是不是等边三角形
#include <stdio.h>
int main()
{
    int a,b,c;
    printf("Please three positive integers.");
    scanf("%d%d%d",&a,&b,&c);
    if (a<=0||b<=0||c<0)
    {
        printf("Input wrong numbers.");
    }
    else
    {
        if(a+b>c&&a+c>b&&b+c>a)
        {
            if(a==b&&a==c)
            {
                printf("%d,%d,%d is an equilateral triangle.\n",a,b,c);
            }
            else
            {
                printf("%d%,%d,%d is an ordinary triangle.\n",a,b,c);
            }
        }
            else
            {
                printf("%d,%d,%d is not an triangle.",a,b,c);
            }

        }
        return 0;
    }

1.输入日期，计算这是这年的第几天
#include <stdio.h>
int main()
{
    int day,month,year,t;
    printf("please input date.\n");
    scanf("%d%d%d",&year,&month,&day);
    t=0;
    switch(month)
   {
   case 12:t+=30;
   case 11:t+=31;
   case 10:t+=30;
   case 9:t+=31;
   case 8:t+=31;
   case 7:t+=30;
   case 6:t+=31;
   case 5:t+=30;
   case 4:t+=31;
   case 3:t+=28;
 if((year%400==0)||(year%4==0&&year%100!=0))
   {
       t+=1;
   }
   else
   {
       t+=0;
   }
   case 2:t+=31;
   case 1:t+=day;
   break;

   }
    printf("%d.%d.%d has %d days.\n",year,month,day,t);
   return 0;
   }
